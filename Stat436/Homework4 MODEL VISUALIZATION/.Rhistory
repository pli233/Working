"VVS1" = 7,
"IF" = 8) # 假设IF代表最高纯净度，赋值为8
)
View(diamonds_df)
#Hide unnecessary output and warning message such as library(tidyverse)
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(tidymodels)
diamonds_df <- read_csv("./diamonds.csv")
# Recoding cut, clarity, and color columns into number
diamonds_df <- diamonds_df %>%
mutate(
cut = recode(cut,
"Ideal" = 5,
"Premium" = 4,
"Very Good" = 3,
"Good" = 2,
"Fair" = 1),
clarity = recode(clarity,
"I1" = 1,
"SI2" = 2,
"SI1" = 3,
"VS2" = 4,
"VS1" = 5,
"VVS2" = 6,
"VVS1" = 7,
"IF" = 8),
color = recode(color,
"J" = 1,
"I" = 2,
"H" = 3,
"G" = 4,
"F" = 5,
"E" = 6,
"D" = 7)
)
# Viewing the first few rows to confirm the changes
head(diamonds_df)
#Hide unnecessary output and warning message such as library(tidyverse)
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(tidymodels)
diamonds_df <- read_csv("./diamonds.csv")
# Recoding cut, clarity, and color columns into number
diamonds_df <- diamonds_df %>%
mutate(
cut = recode(cut,
"Ideal" = 5,
"Premium" = 4,
"Very Good" = 3,
"Good" = 2,
"Fair" = 1),
clarity = recode(clarity,
"I1" = 1,
"SI2" = 2,
"SI1" = 3,
"VS2" = 4,
"VS1" = 5,
"VVS2" = 6,
"VVS1" = 7,
"IF" = 8),
color = recode(color,
"J" = 1,
"I" = 2,
"H" = 3,
"G" = 4,
"F" = 5,
"E" = 6,
"D" = 7)
)
# Viewing the first few rows to confirm the changes
head(diamonds_df)
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe, training = diamonds_df)
pca_summary <- summary(pca_prep, print = TRUE)  # This will print the summary
# If you want to get the variable importance or loadings
loadings <- tidy(pca_prep, number = 1) # Extract PCA loadings for the first component
# View the loadings
print(loadings)
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe, training = diamonds_df)
pca_summary <- summary(pca_prep, print = TRUE)  # This will print the summary
# If you want to get the variable importance or loadings
loadings <- tidy(pca_prep, number = 2) # Extract PCA loadings for the first component
# View the loadings
print(loadings)
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe, training = diamonds_df)
pca_summary <- summary(pca_prep, print = TRUE)  # This will print the summary
# If you want to get the variable importance or loadings
loadings <- tidy(pca_prep, number = 1) # Extract PCA loadings for the first component
# View the loadings
print(loadings)
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe, training = diamonds_df)
# Step3: display result of pca
tidy(pca_prep, 2, type = "variance")
# Extract PCA results
pca_results <- tidy(pca_prep, number = 1) %>%  # Get the loadings for the first component; modify as needed for more components
mutate(terms = rownames(.))  # Create a 'terms' column based on rownames
# Use ggplot2 to plot the results
ggplot(pca_results, aes(x = value, y = reorder(terms, value))) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1, scales = "free_y") +
labs(x = "Component Loadings", y = NULL) +
theme_minimal() +
theme(axis.text = element_text(size = 7))
View(pca_prep)
# Extract PCA results
pca_results <- tidy(pca_prep, number = 1) %>%  # Get the loadings for the first component; modify as needed for more components
mutate(terms = rownames(.))  # Create a 'terms' column based on rownames
# Create a bar plot of the loadings for PC1 and PC2
ggplot(pca_results, aes(x = terms, y = value, fill = PC)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
coord_flip() +  # Flip coordinates for horizontal bars
labs(x = "Variables", y = "PCA Loadings", title = "PCA Loadings for PC1 and PC2") +
theme_minimal()
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe, training = diamonds_df)
# Step3: display result of pca
tidy(pca_prep, 2, type = "variance")
# Step 4: Plot the variances
ggplot(pca_variance, aes(x = component, y = percent_variance)) +
geom_col(fill = "steelblue") +
geom_text(aes(label = scales::percent(percent_variance)),
position = position_dodge(width = 0.9),
hjust = -0.1) +
labs(title = "PCA Variance Explained",
x = "Principal Component",
y = "Percentage of Variance Explained") +
theme_minimal()
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe, training = diamonds_df)
# Step 3: Extract variances for PCA components
pca_variance <- tidy(pca_prep, number = 2, type = "variance")
# Step 4: Plot the variances
ggplot(pca_variance, aes(x = component, y = percent_variance)) +
geom_col(fill = "steelblue") +
geom_text(aes(label = scales::percent(percent_variance)),
position = position_dodge(width = 0.9),
hjust = -0.1) +
labs(title = "PCA Variance Explained",
x = "Principal Component",
y = "Percentage of Variance Explained") +
theme_minimal()
# Recoding cut, clarity, and color columns into number
diamonds_df <- diamonds_df %>%
mutate(
cut = recode(cut,
"Ideal" = 5,
"Premium" = 4,
"Very Good" = 3,
"Good" = 2,
"Fair" = 1),
clarity = recode(clarity,
"I1" = 1,
"SI2" = 2,
"SI1" = 3,
"VS2" = 4,
"VS1" = 5,
"VVS2" = 6,
"VVS1" = 7,
"IF" = 8),
color = recode(color,
"J" = 1,
"I" = 2,
"H" = 3,
"G" = 4,
"F" = 5,
"E" = 6,
"D" = 7)
)
# Viewing the first few rows to confirm the changes
head(diamonds_df)
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe, training = diamonds_df)
# Step 3: Extract variances for PCA components
pca_variance <- tidy(pca_prep, number = 2, type = "variance")
# Step 4: Plot the variances
ggplot(pca_variance, aes(x = component, y = percent_variance)) +
geom_col(fill = "steelblue") +
geom_text(aes(label = scales::percent(percent_variance)),
position = position_dodge(width = 0.9),
hjust = -0.1) +
labs(title = "PCA Variance Explained",
x = "Principal Component",
y = "Percentage of Variance Explained") +
theme_minimal()
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe, training = diamonds_df)
# Step 3: Extract variances for PCA components
tidied_pca <- tidy(pca_prep, 2)
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe, training = diamonds_df)
# Step 3: Extract variances for PCA components
tidied_pca <- tidy(pca_prep, 2)
tidied_pca
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe, training = diamonds_df)
# Step 3: Extract variances for PCA components
tidied_pca <- tidy(pca_prep, 2)
tidied_pca %>%
filter(component %in% paste0("PC", 1:5)) %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
library(tidytext)
library(tidytext)
tidied_pca %>%
filter(component %in% paste0("PC", 1:4)) %>%
group_by(component) %>%
top_n(8, abs(value)) %>%
ungroup() %>%
mutate(terms = reorder_within(terms, abs(value), component)) %>%
ggplot(aes(abs(value), terms, fill = value > 0)) +
geom_col() +
facet_wrap(~component, scales = "free_y") +
scale_y_reordered() +
labs(
x = "Absolute value of contribution",
y = NULL, fill = "Positive?"
)
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
update_role(price) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe, training = diamonds_df)
# Step 3: Extract variances for PCA components
tidied_pca <- tidy(pca_prep, 2)
tidied_pca %>%
filter(component %in% paste0("PC", 1:5)) %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
update_role(price, price) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe, training = diamonds_df)
# Step 3: Extract variances for PCA components
tidied_pca <- tidy(pca_prep, 2)
tidied_pca %>%
filter(component %in% paste0("PC", 1:5)) %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
# Recoding cut, clarity, and color columns into number
diamonds_df <- diamonds_df %>%
mutate(
cut = recode(cut,
"Ideal" = 5,
"Premium" = 4,
"Very Good" = 3,
"Good" = 2,
"Fair" = 1),
clarity = recode(clarity,
"I1" = 1,
"SI2" = 2,
"SI1" = 3,
"VS2" = 4,
"VS1" = 5,
"VVS2" = 6,
"VVS1" = 7,
"IF" = 8),
color = recode(color,
"J" = 1,
"I" = 2,
"H" = 3,
"G" = 4,
"F" = 5,
"E" = 6,
"D" = 7)
)
# Viewing the first few rows to confirm the changes
head(diamonds_df)
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
update_role(price, price) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe, training = diamonds_df)
# Step 3: Extract variances for PCA components
tidied_pca <- tidy(pca_prep, 2)
tidied_pca %>%
filter(component %in% paste0("PC", 1:5)) %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
update_role(price, new_role = "price") %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe, training = diamonds_df)
# Step 3: Extract variances for PCA components
tidied_pca <- tidy(pca_prep, 2)
tidied_pca %>%
filter(component %in% paste0("PC", 1:5)) %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
View(tidied_pca)
#Hide unnecessary output and warning message such as library(tidyverse)
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(tidymodels)
diamonds_df <- read_csv("./diamonds.csv")
# Recoding cut, clarity, and color columns into number
diamonds_df <- diamonds_df %>%
mutate(
cut = recode(cut,
"Ideal" = 5,
"Premium" = 4,
"Very Good" = 3,
"Good" = 2,
"Fair" = 1),
clarity = recode(clarity,
"I1" = 1,
"SI2" = 2,
"SI1" = 3,
"VS2" = 4,
"VS1" = 5,
"VVS2" = 6,
"VVS1" = 7,
"IF" = 8),
color = recode(color,
"J" = 1,
"I" = 2,
"H" = 3,
"G" = 4,
"F" = 5,
"E" = 6,
"D" = 7)
)
# Viewing the first few rows to confirm the changes
head(diamonds_df)
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
update_role(price, new_role = "price") %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe, training = diamonds_df)
# Step 3: Extract variances for PCA components
tidied_pca <- tidy(pca_prep, 2)
tidied_pca %>%
filter(component %in% paste0("PC", 1:5)) %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
library(tidytext)
tidied_pca %>%
filter(component %in% paste0("PC", 1:4)) %>%
group_by(component) %>%
top_n(8, abs(value)) %>%
ungroup() %>%
mutate(terms = reorder_within(terms, abs(value), component)) %>%
ggplot(aes(abs(value), terms, fill = value > 0)) +
geom_col() +
facet_wrap(~component, scales = "free_y") +
scale_y_reordered() +
labs(
x = "Absolute value of contribution",
y = NULL, fill = "Positive?"
)
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
update_role(price, new_role = "price") %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe)
# Step 3: Extract variances for PCA components
tidied_pca <- tidy(pca_prep, 2)
tidied_pca %>%
filter(component %in% paste0("PC", 1:5)) %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
#Hide unnecessary output and warning message such as library(tidyverse)
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(tidymodels)
diamonds_df <- read_csv("./diamonds.csv")
# Recoding cut, clarity, and color columns into number
diamonds_df <- diamonds_df %>%
mutate(
cut = recode(cut,
"Ideal" = 5,
"Premium" = 4,
"Very Good" = 3,
"Good" = 2,
"Fair" = 1),
clarity = recode(clarity,
"I1" = 1,
"SI2" = 2,
"SI1" = 3,
"VS2" = 4,
"VS1" = 5,
"VVS2" = 6,
"VVS1" = 7,
"IF" = 8),
color = recode(color,
"J" = 1,
"I" = 2,
"H" = 3,
"G" = 4,
"F" = 5,
"E" = 6,
"D" = 7)
)
# Viewing the first few rows to confirm the changes
head(diamonds_df)
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
update_role(price, new_role = "price") %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe)
# Step 3: Extract variances for PCA components
tidied_pca <- tidy(pca_prep, 2)
tidied_pca %>%
filter(component %in% paste0("PC", 1:5)) %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
library(tidytext)
tidied_pca %>%
filter(component %in% paste0("PC", 1:4)) %>%
group_by(component) %>%
top_n(8, abs(value)) %>%
ungroup() %>%
mutate(terms = reorder_within(terms, abs(value), component)) %>%
ggplot(aes(abs(value), terms, fill = value > 0)) +
geom_col() +
facet_wrap(~component, scales = "free_y") +
scale_y_reordered() +
labs(
x = "Absolute value of contribution",
y = NULL, fill = "Positive?"
)
