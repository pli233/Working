update_role(price) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe, training = diamonds_df)
# Step 3: Extract variances for PCA components
tidied_pca <- tidy(pca_prep, 2)
tidied_pca %>%
filter(component %in% paste0("PC", 1:5)) %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
update_role(price, price) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe, training = diamonds_df)
# Step 3: Extract variances for PCA components
tidied_pca <- tidy(pca_prep, 2)
tidied_pca %>%
filter(component %in% paste0("PC", 1:5)) %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
# Recoding cut, clarity, and color columns into number
diamonds_df <- diamonds_df %>%
mutate(
cut = recode(cut,
"Ideal" = 5,
"Premium" = 4,
"Very Good" = 3,
"Good" = 2,
"Fair" = 1),
clarity = recode(clarity,
"I1" = 1,
"SI2" = 2,
"SI1" = 3,
"VS2" = 4,
"VS1" = 5,
"VVS2" = 6,
"VVS1" = 7,
"IF" = 8),
color = recode(color,
"J" = 1,
"I" = 2,
"H" = 3,
"G" = 4,
"F" = 5,
"E" = 6,
"D" = 7)
)
# Viewing the first few rows to confirm the changes
head(diamonds_df)
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
update_role(price, price) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe, training = diamonds_df)
# Step 3: Extract variances for PCA components
tidied_pca <- tidy(pca_prep, 2)
tidied_pca %>%
filter(component %in% paste0("PC", 1:5)) %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
update_role(price, new_role = "price") %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe, training = diamonds_df)
# Step 3: Extract variances for PCA components
tidied_pca <- tidy(pca_prep, 2)
tidied_pca %>%
filter(component %in% paste0("PC", 1:5)) %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
View(tidied_pca)
#Hide unnecessary output and warning message such as library(tidyverse)
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(tidymodels)
diamonds_df <- read_csv("./diamonds.csv")
# Recoding cut, clarity, and color columns into number
diamonds_df <- diamonds_df %>%
mutate(
cut = recode(cut,
"Ideal" = 5,
"Premium" = 4,
"Very Good" = 3,
"Good" = 2,
"Fair" = 1),
clarity = recode(clarity,
"I1" = 1,
"SI2" = 2,
"SI1" = 3,
"VS2" = 4,
"VS1" = 5,
"VVS2" = 6,
"VVS1" = 7,
"IF" = 8),
color = recode(color,
"J" = 1,
"I" = 2,
"H" = 3,
"G" = 4,
"F" = 5,
"E" = 6,
"D" = 7)
)
# Viewing the first few rows to confirm the changes
head(diamonds_df)
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
update_role(price, new_role = "price") %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe, training = diamonds_df)
# Step 3: Extract variances for PCA components
tidied_pca <- tidy(pca_prep, 2)
tidied_pca %>%
filter(component %in% paste0("PC", 1:5)) %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
library(tidytext)
tidied_pca %>%
filter(component %in% paste0("PC", 1:4)) %>%
group_by(component) %>%
top_n(8, abs(value)) %>%
ungroup() %>%
mutate(terms = reorder_within(terms, abs(value), component)) %>%
ggplot(aes(abs(value), terms, fill = value > 0)) +
geom_col() +
facet_wrap(~component, scales = "free_y") +
scale_y_reordered() +
labs(
x = "Absolute value of contribution",
y = NULL, fill = "Positive?"
)
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
update_role(price, new_role = "price") %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe)
# Step 3: Extract variances for PCA components
tidied_pca <- tidy(pca_prep, 2)
tidied_pca %>%
filter(component %in% paste0("PC", 1:5)) %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
#Hide unnecessary output and warning message such as library(tidyverse)
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(tidymodels)
diamonds_df <- read_csv("./diamonds.csv")
# Recoding cut, clarity, and color columns into number
diamonds_df <- diamonds_df %>%
mutate(
cut = recode(cut,
"Ideal" = 5,
"Premium" = 4,
"Very Good" = 3,
"Good" = 2,
"Fair" = 1),
clarity = recode(clarity,
"I1" = 1,
"SI2" = 2,
"SI1" = 3,
"VS2" = 4,
"VS1" = 5,
"VVS2" = 6,
"VVS1" = 7,
"IF" = 8),
color = recode(color,
"J" = 1,
"I" = 2,
"H" = 3,
"G" = 4,
"F" = 5,
"E" = 6,
"D" = 7)
)
# Viewing the first few rows to confirm the changes
head(diamonds_df)
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
update_role(price, new_role = "price") %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe)
# Step 3: Extract variances for PCA components
tidied_pca <- tidy(pca_prep, 2)
tidied_pca %>%
filter(component %in% paste0("PC", 1:5)) %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
library(tidytext)
tidied_pca %>%
filter(component %in% paste0("PC", 1:4)) %>%
group_by(component) %>%
top_n(8, abs(value)) %>%
ungroup() %>%
mutate(terms = reorder_within(terms, abs(value), component)) %>%
ggplot(aes(abs(value), terms, fill = value > 0)) +
geom_col() +
facet_wrap(~component, scales = "free_y") +
scale_y_reordered() +
labs(
x = "Absolute value of contribution",
y = NULL, fill = "Positive?"
)
#Hide unnecessary output and warning message such as library(tidyverse)
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(tidymodels)
diamonds_df <- read_csv("./diamonds.csv")
# Recoding cut, clarity, and color columns into number
diamonds_df <- diamonds_df %>%
mutate(
cut = recode(cut,
"Ideal" = 5,
"Premium" = 4,
"Very Good" = 3,
"Good" = 2,
"Fair" = 1),
clarity = recode(clarity,
"I1" = 1,
"SI2" = 2,
"SI1" = 3,
"VS2" = 4,
"VS1" = 5,
"VVS2" = 6,
"VVS1" = 7,
"IF" = 8),
color = recode(color,
"J" = 1,
"I" = 2,
"H" = 3,
"G" = 4,
"F" = 5,
"E" = 6,
"D" = 7)
)
# Viewing the first few rows to confirm the changes
head(diamonds_df)
# Step 1: Specify the recipe
pca_recipe <- recipe(~., data = diamonds_df) %>%
update_role(price, new_role = "price") %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe)
# Step 3: Extract variances for PCA components
tidied_pca <- tidy(pca_prep, 2)
tidied_pca %>%
filter(component %in% paste0("PC", 1:5)) %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
library(tidytext)
tidied_pca %>%
filter(component %in% paste0("PC", 1:4)) %>%
group_by(component) %>%
top_n(8, abs(value)) %>%
ungroup() %>%
mutate(terms = reorder_within(terms, abs(value), component)) %>%
ggplot(aes(abs(value), terms, fill = value > 0)) +
geom_col() +
facet_wrap(~component, scales = "free_y") +
scale_y_reordered() +
labs(
x = "Absolute value of contribution",
y = NULL, fill = "Positive?"
)
# Step 1: Specify the recipe
pca_recipe <- recipe(~ . - price, data = diamonds_df) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 1: Specify the recipe
pca_recipe <- recipe(~ ., data = diamonds_df) %>%
step_rm(price) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe)
# Step 3: Extract variances for PCA components
tidied_pca <- tidy(pca_prep, 2)
tidied_pca %>%
filter(component %in% paste0("PC", 1:5)) %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
# Step 1: Specify the recipe
pca_recipe <- recipe(~ ., data = diamonds_df) %>%
step_rm(price) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe)
# Step 3: Extract variances for PCA components
tidied_pca <- tidy(pca_prep, 2)
View(tidied_pca)
# Step 1: Specify the recipe
pca_recipe <- recipe(~ ., data = diamonds_df) %>%
step_rm(price) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.5)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe)
# Step 3: Extract variances for PCA components
tidied_pca <- tidy(pca_prep, 2)
View(tidied_pca)
# Step 1: Specify the recipe
pca_recipe <- recipe(~ ., data = diamonds_df) %>%
step_rm(price) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes())
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe)
# Step 3: Extract variances for PCA components
tidied_pca <- tidy(pca_prep, 2)
View(tidied_pca)
temp <- diamonds_df %>% drop(price)
temp <- diamonds_df %>%  select(-price)
# Step 1: Specify the recipe
pca_recipe <- recipe(~ ., data = temp) %>%
step_rm(price) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe)
temp <- diamonds_df %>%  select(-price)
# Step 1: Specify the recipe
pca_recipe <- recipe(~ ., data = temp) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), threshold = 0.95)
# Step 2: Prepare and train the recipe
pca_prep <- prep(pca_recipe)
# Step 3: Extract variances for PCA components
tidied_pca <- tidy(pca_prep, 2)
tidied_pca %>%
filter(component %in% paste0("PC", 1:5)) %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
library(tidytext)
tidied_pca %>%
filter(component %in% paste0("PC", 1:4)) %>%
group_by(component) %>%
top_n(8, abs(value)) %>%
ungroup() %>%
mutate(terms = reorder_within(terms, abs(value), component)) %>%
ggplot(aes(abs(value), terms, fill = value > 0)) +
geom_col() +
facet_wrap(~component, scales = "free_y") +
scale_y_reordered() +
labs(
x = "Absolute value of contribution",
y = NULL, fill = "Positive?"
)
View(tidied_pca)
#Hide unnecessary output and warning message such as library(tidyverse)
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(tidymodels)
library(broom)
diamonds_df <- read_csv("./diamonds.csv")
# 对'cut', 'clarity', 和 'color'列进行数值编码
diamonds_df <- diamonds_df %>%
mutate(
cut = recode(cut, "Ideal" = 5, "Premium" = 4, "Very Good" = 3, "Good" = 2, "Fair" = 1),
clarity = recode(clarity, "I1" = 1, "SI2" = 2, "SI1" = 3, "VS2" = 4, "VS1" = 5, "VVS2" = 6, "VVS1" = 7, "IF" = 8),
color = recode(color, "J" = 1, "I" = 2, "H" = 3, "G" = 4, "F" = 5, "E" = 6, "D" = 7)
)
# 创建PCA配方并排除'price'变量
pca_recipe <- recipe(~ . - price, data = diamonds_df) %>%
step_normalize(all_predictors(), -all_outcomes()) %>%
step_pca(all_predictors(), -all_outcomes(), threshold = 0.95)
# 对'cut', 'clarity', 和 'color'列进行数值编码
diamonds_df <- diamonds_df %>%
mutate(
cut = recode(cut, "Ideal" = 5, "Premium" = 4, "Very Good" = 3, "Good" = 2, "Fair" = 1),
clarity = recode(clarity, "I1" = 1, "SI2" = 2, "SI1" = 3, "VS2" = 4, "VS1" = 5, "VVS2" = 6, "VVS1" = 7, "IF" = 8),
color = recode(color, "J" = 1, "I" = 2, "H" = 3, "G" = 4, "F" = 5, "E" = 6, "D" = 7)
)
# 创建PCA配方并排除'price'变量
temp <- diamonds_df %>%  select(-price)
pca_recipe <- recipe(~ ., data = temp) %>%
step_normalize(all_predictors(), -all_outcomes()) %>%
step_pca(all_predictors(), -all_outcomes(), threshold = 0.95)
# 准备并应用PCA配方
pca_prep <- prep(pca_recipe)
pca_summary <- tidy(pca_prep, number = 1)  # 获取主成分摘要
# 将PCA应用于数据集
diamonds_transformed <- bake(pca_prep, new_data = NULL)
# 将主成分和原始价格数据结合起来
diamonds_transformed <- bind_cols(diamonds_transformed, diamonds_df %>% select(price))
# 使用主成分作为预测变量建立线性模型
lm_model <- lm(price ~ ., data = diamonds_transformed)
lm_summary <- summary(lm_model)
# 输出模型摘要来查看哪些主成分对价格影响最大
print(lm_summary)
# 使用tidy()从lm模型中提取系数并进行排序，以确定影响最大的变量
tidy_lm <- tidy(lm_model)
top_influencers <- tidy_lm %>%
arrange(desc(abs(estimate)))  # 根据估计系数的绝对值排序
# 输出影响最大的几个系数
print(top_influencers)
# 如果您想要直观展示影响最大的变量，可以绘制一个系数图
ggplot(top_influencers, aes(x = reorder(term, estimate), y = estimate, fill = estimate > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(x = "Variables", y = "Coefficients", title = "Top Influencers on Diamond Price")
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(tidyverse)
library(embed)
library(tidymodels)
th <- theme_minimal() +
theme(
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "#f7f7f7"),
panel.border = element_rect(fill = NA, color = "#0c0c0c"),
axis.text = element_text(size = 14),
axis.title = element_text(size = 16),
strip.text = element_text(size = 16),
legend.position = "bottom"
)
theme_set(th)
pbmc <- read_csv("https://uwmadison.box.com/shared/static/ai539s30rjsw5ke4vxbjrxjaiihq7edk.csv")
umap_rec <- recipe(~., data = pbmc) |>
update_role(cell_tag, new_role = "id") |>
step_umap(all_predictors(), learn_rate = 0.1, neighbors = 5)
umap_prep <- prep(umap_rec)
scores <- bake(umap_prep, pbmc) |>
left_join(pbmc)
ggplot(scores) +
geom_point(aes(UMAP1, UMAP2, col = GNLY), size = 0.5, alpha = 0.4) +
scale_color_viridis_c() +
coord_fixed()
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(tidyverse)
library(tidymodels)
library(broom)
library(ggplot2)
library(plotly) # for interactive plots if needed
diamonds_df <- read_csv("path_to/diamonds.csv")
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(tidyverse)
library(tidymodels)
library(broom)
library(ggplot2)
library(plotly) # for interactive plots if needed
diamonds_df <- read_csv("https://raw.githubusercontent.com/pli233/Working/main/Stat436/Homework4%20MODEL%20VISUALIZATION/diamonds.csv")
# Recoding the categorical variables for clarity, cut, and color
diamonds_df <- diamonds_df %>%
mutate(
cut = recode(cut, "Ideal" = 5, "Premium" = 4, "Very Good" = 3, "Good" = 2, "Fair" = 1),
clarity = recode(clarity, "I1" = 1, "SI2" = 2, "SI1" = 3, "VS2" = 4, "VS1" = 5, "VVS2" = 6, "VVS1" = 7, "IF" = 8),
color = recode(color, "J" = 1, "I" = 2, "H" = 3, "G" = 4, "F" = 5, "E" = 6, "D" = 7)
)
# Remove price from PCA analysis
temp <- select(diamonds_df, -price)
# Setting up PCA
pca_recipe <- recipe(~ ., data = temp) %>%
step_normalize(all_predictors()) %>%
step_pca(all_predictors(), threshold = 0.95)
# Preparing and baking the recipe
pca_prep <- prep(pca_recipe)
diamonds_transformed <- bake(pca_prep, new_data = NULL)
# Combining PCA results with price
final_data <- bind_cols(diamonds_transformed, diamonds_df %>% select(price))
