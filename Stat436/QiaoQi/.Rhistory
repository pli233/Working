p2 <- ggplot(data = q3, aes(x=percentage, y=obese_p*100)) +
geom_point(aes(color = sex, shape = sex), alpha = 0.5) +
geom_smooth(aes(linetype = sex), se=FALSE, color="#F7A928") +
labs(
x = "Proportion of Bachelors (Group by zip)",
y = "Percentage of Obese",
color = "Sex",
shape = "Sex",
title = "Relationship Between Education Degree and Obesity Proportion"
) +
theme_bw()+
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5) # Center the plot title
)+
scale_color_manual(values = my_colors)
# Combine the two plots using patchwork
combined_plot <- p2 / p1 + plot_layout(guides = 'collect')
# Print the combined plot
combined_plot
library(patchwork)
my_colors <- c("female" = "#1E90FF", "male" = "#FF69B4")
# Faceted plot by sex
p1 <- ggplot(data = q3,aes(x=percentage, y=obese_p*100)) +
geom_point(aes(color = sex),alpha = 0.5) +
geom_smooth(aes(linetype = sex),se=FALSE, color="#F7A928") +
facet_wrap(~sex, scales = 'free_y') +
labs(
x = "Proportion of Bachelors (Group by zip)",
y = "Percentage of Obese",
title = "Faceted by Sex"
) +
theme_bw()+
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5) # Center the plot title
)+
scale_color_manual(values = my_colors)
p2 <- ggplot(data = q3, aes(x=percentage, y=obese_p*100)) +
geom_point(aes(color = sex, shape = sex), alpha = 0.5) +
geom_smooth(aes(linetype = sex), se=FALSE, color="#F7A928") +
labs(
x = "Proportion of Bachelors (Group by zip)",
y = "Percentage of Obese",
color = "Sex Points Color",
shape = "Sex Line Shape",
title = "Relationship Between Education Degree and Obesity Proportion"
) +
theme_bw()+
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5) # Center the plot title
)+
scale_color_manual(values = my_colors)
# Combine the two plots using patchwork
combined_plot <- p2 / p1 + plot_layout(guides = 'collect')
# Print the combined plot
combined_plot
library(patchwork)
my_colors <- c("female" = "#1E90FF", "male" = "#FF69B4")
# Faceted plot by sex
p1 <- ggplot(data = q3,aes(x=percentage, y=obese_p*100)) +
geom_point(aes(color = sex),alpha = 0.5) +
geom_smooth(aes(linetype = sex),se=FALSE, color="#F7A928") +
facet_wrap(~sex, scales = 'free_y') +
labs(
x = "Proportion of Bachelors (Group by zip)",
y = "Percentage of Obese",
title = "Faceted by Sex"
) +
theme_bw()+
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5) # Center the plot title
)+
scale_color_manual(values = my_colors)
p2 <- ggplot(data = q3, aes(x=percentage, y=obese_p*100)) +
geom_point(aes(color = sex, shape = sex), alpha = 0.5) +
geom_smooth(aes(linetype = sex), se=FALSE, color="#F7A928") +
labs(
x = "Proportion of Bachelors (Group by zip)",
y = "Percentage of Obese",
color = "Sex",
shape = "Sex",
title = "Relationship Between Education Degree and Obesity Proportion"
) +
theme_bw()+
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5) # Center the plot title
)+
scale_color_manual(values = my_colors)
# Combine the two plots using patchwork
combined_plot <- p2 / p1 + plot_layout(guides = 'collect')
# Print the combined plot
combined_plot
antibiotic <- read_csv("https://uwmadison.box.com/shared/static/5jmd9pku62291ek20lioevsw1c588ahx.csv")
antibiotic
View(antibiotic)
ggplot(antibiotic, aes(x = time, y = value, group = species, color = antibiotic)) +
geom_line() +
geom_point() +
facet_wrap(~species, scales = 'free_y') +
theme_bw() +
labs(x = "Time", y = "Abundance", title = "Species Abundance Over Time by Antibiotic Treatment")
ggplot(antibiotic, aes(x = time, y = value, group = species, color = antibiotic)) +
geom_point() +
facet_wrap(~species, scales = 'free_y') +
theme_bw() +
labs(x = "Time", y = "Abundance", title = "Species Abundance Over Time by Antibiotic Treatment")
ggplot(antibiotic, aes(x = time, y = value, group = interaction(species, ind), color = antibiotic)) +
geom_line() +
geom_point() +
facet_wrap(~species + ind, scales = 'free_y') +
theme_bw() +
labs(x = "Time", y = "Value", title = "Value Over Time by Antibiotic Treatment and Category")
# Create the plot
ggplot(antibiotic, aes(x = time, y = value, group = interaction(species, ind), color = antibiotic)) +
geom_line() +
geom_point() +
# Facet by species and individual (ind), with a shared y-axis scale
facet_grid(species ~ ind, scales = 'free_x') +
theme_bw() +
labs(x = "Time", y = "Value", title = "Value Over Time by Antibiotic Treatment and Category") +
# Adjust the legend position if necessary
theme(legend.position = "bottom")
# Create the plot
ggplot(antibiotic, aes(x = time, y = value, group = interaction(species, ind))) +
geom_line() +
geom_point(aes(color = antibiotic)) +
# Facet by species and individual (ind), with a shared y-axis scale
facet_grid(species ~ ind, scales = 'free_x') +
theme_bw() +
labs(x = "Time", y = "Value", title = "Value Over Time by Antibiotic Treatment and Category") +
# Adjust the legend position if necessary
theme(legend.position = "bottom")
# Create the plot
ggplot(antibiotic, aes(x = time, y = value, group = interaction(species, ind))) +
geom_line() +
geom_point(aes(color = antibiotic)) +
# Facet by species and individual (ind), with a shared y-axis scale
facet_grid(species ~ ind, scales = 'free_x') +
theme_bw() +
labs(x = "Time", y = "Value", title = "Value Over Time by Antibiotic Treatment and Category") +
# Adjust the legend position if necessary
theme(legend.position = "right")
# Create the plot
ggplot(antibiotic, aes(x = time, y = value, group = interaction(species, ind))) +
geom_line() +
geom_point(aes(color = antibiotic)) +
# Facet by species and individual (ind), with a shared y-axis scale
facet_grid(species ~ ind, scales = 'free_f') +
theme_bw() +
labs(x = "Time", y = "Value", title = "Value Over Time by Antibiotic Treatment and Category") +
# Adjust the legend position if necessary
theme(legend.position = "right")
# Create the plot
ggplot(antibiotic, aes(x = time, y = value, group = interaction(species, ind))) +
geom_line() +
geom_point(aes(color = antibiotic)) +
# Facet by species and individual (ind), with a shared y-axis scale
facet_grid(species ~ ind, scales = 'free_y') +
theme_bw() +
labs(x = "Time", y = "Value", title = "Value Over Time by Antibiotic Treatment and Category") +
# Adjust the legend position if necessary
theme(legend.position = "right")
# Create the plot
ggplot(antibiotic, aes(x = time, y = value, group = interaction(species, ind))) +
geom_smooth(se=FALSE) +
geom_point(aes(color = antibiotic)) +
# Facet by species and individual (ind), with a shared y-axis scale
facet_grid(species ~ ind, scales = 'free_y') +
theme_bw() +
labs(x = "Time", y = "Value", title = "Value Over Time by Antibiotic Treatment and Category") +
# Adjust the legend position if necessary
theme(legend.position = "right")
# Create the plot
ggplot(antibiotic, aes(x = time, y = value, group = interaction(species, ind))) +
geom_smooth(se=FALSE) +
geom_point(aes(color = antibiotic)) +
# Facet by species and individual (ind), with a shared y-axis scale
facet_grid(species ~ ind, scales = 'free_y') +
theme_bw() +
labs(x = "time", y = "svalue") +
# Adjust the legend position if necessary
theme(legend.position = "right")
# Create the plot
ggplot(antibiotic, aes(x = time, y = value, group = interaction(species, ind))) +
geom_smooth(se=FALSE) +
geom_point(aes(color = antibiotic)) +
# Facet by species and individual (ind), with a shared y-axis scale
facet_grid(species ~ ind, scales = 'free_y') +
theme_bw() +
labs(x = "time", y = "svalue") +
# Adjust the legend position if necessary
theme(legend.position = "right")+
scale_color_manual(c("#64fab4", "#ee875a", "#a3b6f9"))
# Create the plot
ggplot(antibiotic, aes(x = time, y = value, group = interaction(species, ind))) +
geom_smooth(se=FALSE) +
geom_point(aes(color = antibiotic)) +
# Facet by species and individual (ind), with a shared y-axis scale
facet_grid(species ~ ind, scales = 'free_y') +
theme_bw() +
labs(x = "time", y = "svalue") +
# Adjust the legend position if necessary
theme(legend.position = "right")+
scale_color_manual(values = c("#64fab4", "#ee875a", "#a3b6f9"))
# Create the plot
ggplot(antibiotic, aes(x = time, y = value, group = interaction(species, ind))) +
geom_smooth(se=FALSE, color = "black") +
geom_point(aes(color = antibiotic)) +
# Facet by species and individual (ind), with a shared y-axis scale
facet_grid(species ~ ind, scales = 'free_y') +
theme_bw() +
labs(x = "time", y = "svalue") +
# Adjust the legend position if necessary
theme(legend.position = "right")+
scale_color_manual(values = c("#64fab4", "#ee875a", "#a3b6f9"))
# Create the plot
ggplot(antibiotic, aes(x = time, y = value, group = interaction(species, ind))) +
geom_smooth(se=FALSE, color = "black") +
geom_point(aes(color = antibiotic)) +
# Facet by species and individual (ind), with a shared y-axis scale
facet_grid(species ~ ind, scales = 'free_y') +
theme_bw() +
labs(x = "time", y = "svalue") +
# Adjust the legend position if necessary
theme(legend.position = "right",
strip.text.y.left = element_text(angle = 0, hjust = 0)
)+
scale_color_manual(values = c("#64fab4", "#ee875a", "#a3b6f9"))
# Create the plot
ggplot(antibiotic, aes(x = time, y = value, group = interaction(species, ind))) +
geom_smooth(se=FALSE, color = "black") +
geom_point(aes(color = antibiotic)) +
# Facet by species and individual (ind), with a shared y-axis scale
facet_grid(species ~ ind, scales = 'free_y') +
theme_bw() +
labs(x = "time", y = "svalue") +
# Adjust the legend position if necessary
theme(legend.position = "right",
strip.text.y.left = element_text(angle = 90, hjust = 0)
)+
scale_color_manual(values = c("#64fab4", "#ee875a", "#a3b6f9"))
# Create the plot
ggplot(antibiotic, aes(x = time, y = value, group = interaction(species, ind))) +
geom_smooth(se=FALSE, color = "black") +
geom_point(aes(color = antibiotic)) +
# Facet by species and individual (ind), with a shared y-axis scale
facet_grid(species ~ ind, scales = 'free_y') +
theme_bw() +
labs(x = "time", y = "svalue") +
# Adjust the legend position if necessary
theme(legend.position = "right",
strip.text.y.left = element_text(angle = 180, hjust = 0)
)+
scale_color_manual(values = c("#64fab4", "#ee875a", "#a3b6f9"))
# Create the plot
ggplot(antibiotic, aes(x = time, y = value, group = interaction(species, ind))) +
geom_smooth(se=FALSE, color = "black") +
geom_point(aes(color = antibiotic)) +
# Facet by species and individual (ind), with a shared y-axis scale
facet_grid(species ~ ind, scales = 'free_y') +
theme_bw() +
labs(x = "time", y = "svalue") +
# Adjust the legend position if necessary
theme(legend.position = "right",
)+
scale_color_manual(values = c("#64fab4", "#ee875a", "#a3b6f9"))
View(joined_edu)
library(png)
library(png)
# Read the image file
img <- readPNG("HW1_Dis2.png")
# Plot the image
plot(1:2, type = "n", xlab = "", ylab = "", xaxt = 'n', yaxt = 'n')
rasterImage(img, 1, 1, 2, 2)
#Hide unnecessary output and warning message such as library(tidyverse)
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(tidyverse)
library(ggplot2)
library(png)
library(patchwork)
#Justification:
#In this step I just copy the origin data and transfer them from static graph into r data
sales_data <- data.frame(
region = c('A', 'A', 'A', 'A', 'B', 'B', 'B', 'B'),
quarter = c('Q1', 'Q2', 'Q3', 'Q4', 'Q1', 'Q2', 'Q3', 'Q4'),
sales = c(6, 5, 3, 2, 4, 8, 2, 6)
)
sales_data #display the data
#Justification: In order to computer sales for each quarter, we clearly need to distinguish data by quarter, so we apply group_by first.
#then we add the new stat we need, which is the sum of all sales with a new column, named total, using summarise
total_sales_by_quarter <-sales_data %>%
group_by(quarter) %>%
summarise(total = sum(sales))
total_sales_by_quarter
#Justification:
#First, we join total sales per quarter back with the original sales_data by quarter, so we have a one-to-one map between total and sales
sales_data_with_total <- sales_data %>%
left_join(total_sales_by_quarter, by = "quarter")
#Then, we calculate the proportion of sales from each region for each quarter, since the result keep 3 digits after zero, I also apply round function
sales_data_with_prop <- sales_data_with_total %>%
mutate(prop = round(sales / total, 3))
#Finally, we get rid of total column, since it is not included
sales_data_with_prop %>% select(region, quarter, sales, prop)
#Read Data
temperature <- read_csv("https://raw.githubusercontent.com/krisrs1128/stat479_s22/main/data/temperatures.csv")
#Justifications are written with code step by step
#1. Specify the data we about to plot
ggplot(temperature)+
geom_line(aes(x = date, y = temperature, group = city, color = city))+ #2. build the basic graph according to description, using group to connect lines
scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73", "#FF92A5"))+ #3. Base on the example map, tune the color of line
theme_minimal() +
theme(
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_blank(),
) +   #4.make the background like a white box with grey lines
labs(
x = "Month",
y = "Temperature (F)",
) #5.specify labs of axis
#Justifications are written with code step by step
avgTemperature_byCity_byMonth <- temperature %>%
group_by(city, month) %>% #1. Declare category we are going to group by, since we need mean temperature for each month in each city, we will use two category to group at the same time
summarise(mean_temperature = mean(temperature)) #2. Now we calculate stat with mean function for each group
avgTemperature_byCity_byMonth #3. Display result
#Justifications are written with code step by step
#1. Specify the data we about to plot
ggplot(avgTemperature_byCity_byMonth) +
geom_tile(aes(x = month, y = city, fill = mean_temperature),color = "white") +   #2. build the basic graph according to description, using group to connect lines
scale_fill_viridis_c(option = "magma") +  #3. Use the magma color scale (option1)
coord_fixed() +  #4. Ensure the tiles are square
labs(
y= "",
fill = "Temperature (F)",
) #5. Erase autogenerated y lab, add name for filled color scale
#read data
pokemon <- read_csv("https://uwmadison.box.com/shared/static/hf5cmx3ew3ch0v6t0c2x56838er1lt2c.csv")
#simply use mutate and apply described formula
pokemon <-pokemon %>% mutate(attack_to_defense_ratio = Defense/Attack)
head(pokemon)
# Compute the median attack-to-defense ratio for each type_1 group
median_ad_ratio <- pokemon %>%
group_by(type_1) %>%
summarise(median_attack_to_defense_ratio = median(attack_to_defense_ratio))
median_ad_ratio
pokemon <- pokemon %>%
left_join(median_ad_ratio, by = "type_1")
ggplot(pokemon, aes(x = Defense, y = Attack)) +
geom_point(alpha = 0.7, color = "dodgerblue") +
facet_wrap(~type_1, scales = 'free') +
labs(
x = "Defense",
y = "Attack",
title = "Attack vs. Defense Scores by Pokémon Type",
)+
theme_bw()+
theme(
plot.title = element_text(hjust = 0.5) # Center the title
)
##Copied of my origin code for the data cleaning steps, it was a stat240 hw
obesity = read_csv("obesity-hw.csv") %>%
drop_na() %>%                         ## drop rows with missing data
filter(age != "05-17") %>%            ## drop children
mutate(obese_n = pop*obese/bmi) %>%   ## add estimated # of obese adults
group_by(zip,sex) %>%                 ## aggregate over age and sex
summarize(adult_n = sum(pop),         ## compute estimates
obese_n = sum(obese_n),
obese_p = obese_n/adult_n) %>%
ungroup()
#read data
education = read_csv("education.csv")
#rename the two column of
education = education %>% rename(male = pct_m_bach, female =  pct_f_bach)
#use pivot longer to bring male and female together as a variable
trans_edu = education %>% pivot_longer(cols = c("male","female"),names_to = "sex", values_to = "percentage")
#since we only need rows that exist in both dataframe, we use inner join
joined_edu = trans_edu %>% inner_join(obesity,by = c("zip"= "zip", "sex" = "sex")) #setup match rules
#1.First, use `mutate()` to find in each zip and sex the estimated number of bachelors and non-bachelors.
q2 = joined_edu %>% mutate(Is_Bachelors= adult_n*percentage/100, Not_Bachelors= adult_n-Is_Bachelors)%>%
#2.estimate for each zip and sex the number of obese people with a bachelors degree
#by multiplying the number of bachelors with the rate of obesity
mutate(obese_Bachelors = Is_Bachelors*obese_p)%>%
#Repeat this step but for the people without a bachelors degree.
mutate(obese_notBachelors = Not_Bachelors*obese_p) %>%
#3.Now, divide the number of obese people with a bachelors degree by the number of people with a bachelors degree to get the first proportion.
mutate(propotion_obeseBachelors = obese_Bachelors/Is_Bachelors)%>%
#Repeat this step for the people without a bachelors degree.
mutate(propotion_obeseNotBachelors = obese_notBachelors/Not_Bachelors)
#select useful information
q3 = q2 %>% select(percentage, obese_p, sex)
q3 %>% head(10)
#Make a scatter plot that displays the *percentage* of a zip code aged 25+ with a bachelor's degree on the x-axis and the *percentage* obese on the y axis.
ggplot(data = q3, aes(x=percentage, y=obese_p*100,color = sex))+   #Use different colors for each sex
geom_point()+
#Add a trend line or curve for each sex.
geom_smooth(se=FALSE)+
xlab("Propotion of Bachelors (Group by zip) ")+
ylab("Percentage of obese")+
ggtitle("Relations between the eudcation degree and the obese propotion(Male and Female)")
my_colors <- c("female" = "#1E90FF", "male" = "#FF69B4")
# Faceted plot by sex
p1 <- ggplot(data = q3,aes(x=percentage, y=obese_p*100)) +
geom_point(aes(color = sex),alpha = 0.5) +
geom_smooth(aes(linetype = sex),se=FALSE, color="#F7A928") +
facet_wrap(~sex, scales = 'free_y') +
labs(
x = "Proportion of Bachelors (Group by zip)",
y = "Percentage of Obese",
title = "Faceted by Sex"
) +
theme_bw()+
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5) # Center the plot title
)+
scale_color_manual(values = my_colors)
p2 <- ggplot(data = q3, aes(x=percentage, y=obese_p*100)) +
geom_point(aes(color = sex, shape = sex), alpha = 0.5) +
geom_smooth(aes(linetype = sex), se=FALSE, color="#F7A928") +
labs(
x = "Proportion of Bachelors (Group by zip)",
y = "Percentage of Obese",
color = "Sex",
shape = "Sex",
title = "Relationship Between Education Degree and Obesity Proportion"
) +
theme_bw()+
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5) # Center the plot title
)+
scale_color_manual(values = my_colors)
# Combine the two plots using patchwork
combined_plot <- p2 / p1 + plot_layout(guides = 'collect')
# Print the combined plot
combined_plot
antibiotic <- read_csv("https://uwmadison.box.com/shared/static/5jmd9pku62291ek20lioevsw1c588ahx.csv")
antibiotic
# Create the plot for approach 1
ggplot(antibiotic, aes(x = time, y = value, group = interaction(species, ind))) +
geom_smooth(se=FALSE, color = "black") +
geom_point(aes(color = antibiotic)) +
# Facet by species and individual (ind), with a shared y-axis scale
facet_grid(species ~ ind, scales = 'free_y') +
theme_bw() +
labs(x = "time", y = "svalue") +
# Adjust the legend position if necessary
theme(legend.position = "right",
)+
scale_color_manual(values = c("#64fab4", "#ee875a", "#a3b6f9"))
# Read the image file
img <- readPNG("HW1_Dis2.png")
# Plot the image
plot(1:2, type = "n", xlab = "", ylab = "", xaxt = 'n', yaxt = 'n')
rasterImage(img, 1, 1, 2, 2)
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(tidyverse)
install.packages(c("askpass", "BH", "bit", "blob", "boot", "broom", "bslib", "callr", "class", "cli", "cluster", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "DBI", "dbplyr", "digest", "dqrng", "dtplyr", "evaluate", "fansi", "farver", "fastmap", "forcats", "foreign", "fs", "gargle", "ggforce", "ggfun", "glue", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "httr", "isoband", "jsonlite", "KernSmooth", "knitr", "labeling", "lattice", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "nlme", "nnet", "openssl", "polyclip", "prettyunits", "processx", "progress", "ps", "purrr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "rematch", "reprex", "Rfast", "rlang", "rmarkdown", "rpart", "rstudioapi", "rvest", "sass", "scatterpie", "spatial", "stringi", "stringr", "survival", "sys", "tidyr", "tidyverse", "tinytex", "tweenr", "tzdb", "utf8", "uuid", "viridisLite", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "BH", "bit", "blob", "boot", "broom", "bslib", "callr", "class", "cli", "cluster", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "DBI", "dbplyr", "digest", "dqrng", "dtplyr", "evaluate", "fansi", "farver", "fastmap", "forcats", "foreign", "fs", "gargle", "ggforce", "ggfun", "glue", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "httr", "isoband", "jsonlite", "KernSmooth", "knitr", "labeling", "lattice", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "nlme", "nnet", "openssl", "polyclip", "prettyunits", "processx", "progress", "ps", "purrr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "rematch", "reprex", "Rfast", "rlang", "rmarkdown", "rpart", "rstudioapi", "rvest", "sass", "scatterpie", "spatial", "stringi", "stringr", "survival", "sys", "tidyr", "tidyverse", "tinytex", "tweenr", "tzdb", "utf8", "uuid", "viridisLite", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "BH", "bit", "blob", "boot", "broom", "bslib", "callr", "class", "cli", "cluster", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "DBI", "dbplyr", "digest", "dqrng", "dtplyr", "evaluate", "fansi", "farver", "fastmap", "forcats", "foreign", "fs", "gargle", "ggforce", "ggfun", "glue", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "httr", "isoband", "jsonlite", "KernSmooth", "knitr", "labeling", "lattice", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "nlme", "nnet", "openssl", "polyclip", "prettyunits", "processx", "progress", "ps", "purrr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "rematch", "reprex", "Rfast", "rlang", "rmarkdown", "rpart", "rstudioapi", "rvest", "sass", "scatterpie", "spatial", "stringi", "stringr", "survival", "sys", "tidyr", "tidyverse", "tinytex", "tweenr", "tzdb", "utf8", "uuid", "viridisLite", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "BH", "bit", "blob", "boot", "broom", "bslib", "callr", "class", "cli", "cluster", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "DBI", "dbplyr", "digest", "dqrng", "dtplyr", "evaluate", "fansi", "farver", "fastmap", "forcats", "foreign", "fs", "gargle", "ggforce", "ggfun", "glue", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "httr", "isoband", "jsonlite", "KernSmooth", "knitr", "labeling", "lattice", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "nlme", "nnet", "openssl", "polyclip", "prettyunits", "processx", "progress", "ps", "purrr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "rematch", "reprex", "Rfast", "rlang", "rmarkdown", "rpart", "rstudioapi", "rvest", "sass", "scatterpie", "spatial", "stringi", "stringr", "survival", "sys", "tidyr", "tidyverse", "tinytex", "tweenr", "tzdb", "utf8", "uuid", "viridisLite", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages("xfun")
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(tidyverse)
library(tsibble)
library(feasts)
theme_set(theme_bw())
carbon <- read_csv("https://go.wisc.edu/7qx7u1")
head(carbon)
carbon <- carbon |>
pivot_longer(-c("country", "Country Code"), names_to = "year")
carbon
carbon_ts <- carbon |>
mutate(year = as.integer(year)) |>
filter(country != "Switzerland") |>
as_tsibble(key = country, index = year)
carbon |>
mutate(year = as.integer(year)) |>
duplicates(key = country, index = year) |>
arrange(-year)
summary(carbon)
ggplot(carbon_ts) +
geom_line(
aes(year, value, group = country),
alpha = 0.5
)
carbon_ts |>
filter(value > 15)
sorted_countries <- carbon_ts |>
as_tibble() |>
group_by(country) |>
summarise(average = mean(value)) |>
arrange(-average) |>
pull(country)
library(scico)
carbon_ts |>
filter(country %in% sorted_countries[1:35]) |>
ggplot() +
geom_tile(
aes(
year,
reorder(country, value),
fill = log(1 + value),
col = log(1 + value)
)
) +
scale_fill_scico(palette = 'davos')  +
scale_color_scico(palette = 'davos') +
theme(
axis.text.y = element_text(size = 9)
)
install.packages("htmltools")
install.packages("htmltools")
library(rsconnect)
rsconnect::setAccountInfo(name='pli233', token='32DA67BA95C48C5EAC07AC254E249A46', secret='K83zHIcwdf/ZALho9tbXxRzhUh2d6Et4EYD4yWYJ')
shiny::runApp('K:/Working/Stat436/QiaoQi')
