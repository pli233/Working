ggraph(book_graph, 'tree', circular = TRUE) +
geom_edge_link() +
geom_node_point(aes(color = political_ideology), width = 0.1)+
geom_node_label(aes(label = label), size = 1, repel = TRUE)
library(ggraph)
ggraph(book_graph, circular = TRUE) +
geom_edge_link() +
geom_node_point(aes(color = political_ideology), width = 0.1)+
geom_node_label(aes(label = label), size = 1, repel = TRUE)
library(ggraph)
ggraph(book_graph) +
geom_edge_link() +
geom_node_point(aes(color = political_ideology), width = 0.1)+
geom_node_label(aes(label = label), size = 1, repel = TRUE)
library(ggraph)
ggraph(book_graph, , layout = "kk") +
geom_edge_link() +
geom_node_point(aes(color = political_ideology), width = 0.1)+
geom_node_label(aes(label = label), size = 1, repel = TRUE)
library(ggraph)
ggraph(book_graph, layout = "kk") +
geom_edge_link() +
geom_node_point(aes(color = political_ideology), width = 0.1)+
geom_node_label(aes(label = label), size = 1, repel = TRUE)
library(ggraph)
ggraph(book_graph, layout = "kk") +
geom_edge_link() +
geom_node_point(aes(color = political_ideology), width = 0.1)+
geom_node_label(aes(label = label), size = 2, repel = TRUE)
library(ggraph)
ggraph(book_graph, layout = "fr") +
geom_edge_link() +
geom_node_point(aes(color = political_ideology), width = 0.1)+
geom_node_label(aes(label = label), size = 2, repel = TRUE)
library(ggraph)
ggraph(book_graph, layout = "fr") +
geom_edge_link() +
geom_node_point(aes(color = political_ideology), width = 0.1)+
geom_node_label(aes(label = label), size = 1, repel = TRUE)
library(ggraph)
ggraph(book_graph, layout = "kk") +
geom_edge_link() +
geom_node_point(aes(color = political_ideology), width = 0.1)+
geom_node_label(aes(label = label), size = 2, repel = TRUE)
library(ggraph)
ggraph(book_graph, layout = "kk") +
geom_edge_link() +
geom_node_point(aes(color = political_ideology), width = 0.1)+
geom_node_label(aes(label = label), size = 1.5, repel = TRUE)
library(ggraph)
ggraph(book_graph, layout = "kk") +
geom_edge_link() +
geom_node_point(aes(color = political_ideology), width = 0.1)+
geom_node_label(aes(label = label), size = 1, repel = TRUE)
library(ggraph)
ggraph(book_graph, layout = "kk") +
geom_edge_link(width = 0.1) +
geom_node_point(aes(color = political_ideology))+
geom_node_label(aes(label = label), size = 1, repel = TRUE)
library(ggraph)
ggraph(book_graph, layout = "kk") +
geom_edge_link(width = 0.1) +
geom_node_point(aes(color = political_ideology))+
geom_node_label(aes(label = label), size = 1.5, repel = TRUE)
library(ggraph)
ggraph(book_graph, layout = "kk") +
geom_edge_link(width = 0.1) +
geom_node_point(aes(color = political_ideology))+
geom_node_label(aes(label = label), size = 1.3, repel = TRUE)
library(ggraph)
ggraph(book_graph, layout = "kk") +
geom_edge_link(width = 0.1) +
geom_node_point(aes(color = political_ideology))+
geom_node_label(aes(label = label), size = 1.1, repel = TRUE)
ggraph(book_graph, layout = 'matrix') +
geom_edge_tile(aes(fill = weight), color = "white") + # Use fill for edge weight if it's relevant
geom_node_text(aes(label = name), vjust = "inward", hjust = "left", angle = 90, nudge_x = -0.5, check_overlap = TRUE) +
geom_node_text(aes(label = name), vjust = "inward", hjust = "left", nudge_y = 0.5, check_overlap = TRUE) +
theme_void() +  # Use a clean theme
scale_fill_gradient(low = "white", high = "blue") + # Change colors as needed
coord_fixed(ratio = 1) # Ensure tiles are square
ggraph(book_graph, layout = 'matrix') +
geom_edge_tile(aes(fill = weight), color = "white") + # Use fill for edge weight if it's relevant
geom_node_text(aes(label = name), vjust = "inward", hjust = "left", angle = 90, nudge_x = -0.5, check_overlap = TRUE) +
geom_node_text(aes(label = name), vjust = "inward", hjust = "left", nudge_y = 0.5, check_overlap = TRUE) +
coord_fixed(ratio = 1) # Ensure tiles are square
ggraph(book_graph, layout = 'matrix') +
geom_edge_tile(mirror = TRUE, show.legend = TRUE) +
geom_node_text(aes(label = label), x = -.5, nudge_y = 0.5) +
geom_node_text(aes(label = label), y = 0.5, nudge_x = -0.5) +
coord_fixed() # Ensure tiles are square
ggraph(book_graph, layout = 'matrix') +
geom_edge_tile(mirror = TRUE, show.legend = TRUE) +
geom_node_text(aes(label = label), x = -.5, nudge_y = 0.5) +
geom_node_text(aes(label = label), y = 0.5, nudge_x = -0.5) +
scale_y_reverse(expand = c(0, 0, 0, 1.5)) + # make sure the labels aren't hidden
scale_x_discrete(expand = c(0, 1.5, 0, 0)) +
coord_fixed() # Ensure tiles are square
ggraph(book_graph, "matrix") +
geom_edge_tile() +
coord_fixed() +
facet_wrap(~ political_ideology)
ggraph(book_graph, "matrix") +
geom_edge_tile() +
coord_fixed() +
ggraph(book_graph, "matrix") +
geom_edge_tile() +
coord_fixed()
ggraph(book_graph, "matrix") +
geom_edge_tile(mirror = TRUE) +
geom_node_text(aes(label = label), size = 1, x = -2.5, nudge_y = 0.5, hjust = 0) +
geom_node_text(aes(label = label), size = 1, angle = 90, y = 0.5, nudge_x = -0.5, hjust = 0) +
coord_fixed()
ggraph(book_graph, "matrix") +
geom_edge_tile() +
geom_node_text(aes(label = label), size = 1, x = -2.5, nudge_y = 0.5, hjust = 0) +
geom_node_text(aes(label = label), size = 1, angle = 90, y = 0.5, nudge_x = -0.5, hjust = 0) +
coord_fixed()
ggraph(book_graph, "matrix") +
geom_edge_tile() +
geom_node_text(aes(label = label), size = 1, x = -2.5, nudge_y = 0.5, hjust = 0) +
geom_node_text(aes(label = label), size = 1, angle = 90, y = 0.5, nudge_x = -0.5, hjust = 0) +
scale_y_reverse()+
coord_fixed()
ggraph(book_graph, "matrix") +
geom_edge_tile() +
geom_node_text(aes(label = label), size = 1, x = -2.5, nudge_y = 0.5, hjust = 0) +
geom_node_text(aes(label = label), size = 1, angle = 90, y = 0.5, nudge_x = -0.5, hjust = 0) +
scale_y_reverse(expand = c(0, 0, 0, 2.7)) + # make sure the labels aren't hidden
scale_x_discrete(expand = c(0, 3, 0, 0)) +
coord_fixed()
ggraph(book_graph, "matrix") +
geom_edge_tile() +
coord_fixed()+
geom_node_text(aes(label = label), size = 1, x = -2.5, nudge_y = 0.5, hjust = 0) +
geom_node_text(aes(label = label), size = 1, angle = 90, y = 0.5, nudge_x = -0.5, hjust = 0) +
scale_y_reverse(expand = c(0, 0, 0, 2.7)) + # make sure the labels aren't hidden
scale_x_discrete(expand = c(0, 3, 0, 0))
ggraph(book_graph, "matrix") +
geom_edge_tile(mirror = TRUE) +
coord_fixed()+
geom_node_text(aes(label = label), size = 1, x = -2.5, nudge_y = 0.5, hjust = 0) +
geom_node_text(aes(label = label), size = 1, angle = 90, y = 0.5, nudge_x = -0.5, hjust = 0) +
scale_y_reverse(expand = c(0, 0, 0, 2.7)) + # make sure the labels aren't hidden
scale_x_discrete(expand = c(0, 3, 0, 0))
ggraph(book_graph, "matrix") +
geom_edge_tile(mirror = TRUE) +
coord_fixed()+
geom_node_text(aes(label = label), size = 1, x = -2.5, nudge_y = 0.5, hjust = 0) +
geom_node_text(aes(label = label), size = 1, angle = 90, y = 0.5, nudge_x = -0.5, hjust = 0) +
scale_y_reverse(expand = c(0, 0, 0, 2.7)) + # make sure the labels aren't hidden
scale_x_discrete(expand = c(0, 3, 0, 0))+
scale_edge_fill_distiller()
ggraph(book_graph, "matrix") +
geom_edge_tile(mirror = TRUE) +
coord_fixed() +
geom_node_text(aes(label = label), size = 3, x = -2.5, nudge_y = 0.5, hjust = 0) +
geom_node_text(aes(label = label), size = 3, angle = 90, y = 0.5, nudge_x = -0.5, hjust = 0) +
scale_y_reverse(expand = c(0, 0, 0, 2.7)) + # make sure the labels aren't hidden
scale_x_discrete(expand = c(0, 3, 0, 0)) +
scale_edge_fill_distiller() +
ggraph(book_graph, "matrix") +
geom_edge_tile(mirror = TRUE) +
coord_fixed() +
geom_node_text(aes(label = label), size = 3, x = -2.5, nudge_y = 0.5, hjust = 0) +
geom_node_text(aes(label = label), size = 3, angle = 90, y = 0.5, nudge_x = -0.5, hjust = 0) +
scale_y_reverse(expand = c(0, 0, 0, 2.7)) + # make sure the labels aren't hidden
scale_x_discrete(expand = c(0, 3, 0, 0)) +
scale_edge_fill_distiller()
library(ggraph)
theme_set(theme_graph())
ggraph(book_graph, layout = "kk") +
geom_edge_link(width = 0.1) +
geom_node_point(aes(color = political_ideology))+
geom_node_label(aes(label = label), size = 1.1, repel = TRUE)
ggraph(book_graph, "matrix") +
geom_edge_tile(mirror = TRUE) +
coord_fixed() +
geom_node_text(aes(label = label), size = 3, x = -2.5, nudge_y = 0.5, hjust = 0) +
geom_node_text(aes(label = label), size = 3, angle = 90, y = 0.5, nudge_x = -0.5, hjust = 0) +
scale_y_reverse(expand = c(0, 0, 0, 2.7)) + # make sure the labels aren't hidden
scale_x_discrete(expand = c(0, 3, 0, 0)) +
scale_edge_fill_distiller()
ggraph(book_graph, "matrix") +
geom_edge_tile(mirror = TRUE) +
coord_fixed() +
geom_node_text(aes(label = label), size = 3, x = -2.5, nudge_y = 0.5, hjust = 0) +
geom_node_text(aes(label = label), size = 3, angle = 90, y = 0.5, nudge_x = -0.5, hjust = 0) +
scale_edge_fill_distiller()
ggraph(book_graph, "matrix") +
geom_edge_tile(mirror = TRUE) +
coord_fixed() +
geom_node_text(aes(label = label), size = 3, x = -2.5, nudge_y = 0.5, hjust = 0) +
geom_node_text(aes(label = label), size = 3, angle = 90, y = 0.5, nudge_x = -0.5, hjust = 0) +
scale_y_reverse(expand = c(0, 0, 0, 2.7)) + # make sure the labels aren't hidden
scale_x_discrete(expand = c(0, 3, 0, 0)) +
scale_edge_fill_distiller()
library(ggraph)
ggraph(book_graph, layout = "kk") +
geom_edge_link(width = 0.1) +
geom_node_point(aes(color = political_ideology))+
geom_node_label(aes(label = label), size = 1.1, repel = TRUE)
#Hide unnecessary output and warning message such as library(tidyverse)
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(sf)
library(raster)
library(tmap)
bike_data <- read_csv("https://uwmadison.box.com/shared/static/f16jmkkskylfl1hnd5rpslzduja929g2.csv")
head(bike_data)
#Select required data and rename them properly
q1 <- bike_data %>%
dplyr::select(weekday, hr, count) %>%
mutate(weekday = factor(weekday, levels = 0:6, labels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))) %>%
group_by(hr, weekday) %>%
summarise(summary = sum(count))
# Plotting with geom_line
ggplot(q1, aes(x = hr, y = summary)) + # Ensure that we group by weekday for the line plot
geom_line(aes(color = weekday)) +
facet_wrap(~weekday) + # Facets for each weekday
labs(x = "Hour of the Day", y = "Count of Bike Rentals", title = "Bike Demand by Hour Across the Week") +
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5)) # Center the title
q2 <- bike_data %>%
mutate(yr = yr + 2011) %>%
mutate(weekday = factor(weekday, levels = 0:6, labels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))) %>%
group_by(yr, weekday, hr) %>%
summarise(
Q25 = quantile(count, 0.25),
Q75 = quantile(count, 0.75)
) %>%
rename(year = yr, hour = hr) # Renaming the columns
q2
# Merge the summary data with the quantile data.
# Since q2 contains summaries for each year, we will need to join this with q1 based on hr and weekday.
# Assuming that q1 has been grouped and summarised without the year, we will need to account for this.
# First, let's correct the renaming issue in the q2 data frame:
q1 <- q1 %>%
rename(hour = hr) # Rename hr to hour
# Now let's merge q1 and q2
q3 <- q1 %>%
ungroup() %>% # Make sure q1 is not grouped
left_join(q2, by = c("weekday", "hour")) # Join q2 data to q1 data
# Plotting with geom_ribbon and geom_line
ggplot(q3, aes(x = hour, y = summary)) +
geom_ribbon(aes(ymin = Q25, ymax = Q75, fill = as.factor(year)), alpha = 0.8) +
geom_line(aes(color = weekday)) +
facet_wrap(~weekday) + # Facets for each weekday
scale_fill_manual(values = c("blue", "red"), name = "Year") + # Set manual colors for the ribbon based on year
labs(x = "Hour of the Day", y = "Count of Bike Rentals", title = "Bike Demand by Hour Across the Week") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) # Center the title and move legend to bottom
nyc_sf <-read_sf("https://uwmadison.box.com/shared/static/qfmrp9srsoq0a7oj0e7xmgu5spojr33e.geojson")
nyc_sf %>%dplyr::select(geometry)
africa_pop <- raster("https://github.com/krisrs1128/stat436_s24/raw/main/data/afripop2020.tif")
africa_pop
himalayan_lakes <- read_sf("https://raw.githubusercontent.com/krisrs1128/stat436_s23/main/data/GL_3basins_2015.topojson")
himalayan_lakes %>% dplyr::select(geometry)
wi_ev_charging <- read_sf("https://raw.githubusercontent.com/krisrs1128/stat436_s24/main/data/ev.geojson")
wi_ev_charging %>% dplyr::select(geometry)
zion_evl <- raster("https://github.com/krisrs1128/stat436_s24/raw/main/data/landsat.tif")
zion_evl
tm_shape(zion_evl) +
tm_raster()
library(tidygraph)
edge_data_path <- "https://raw.githubusercontent.com/krisrs1128/stat992_f23/6c4130bddbdfc9ef90537c794cdca47773643752/activities/week10/political-books-edges.csv"
node_data_path <- "https://github.com/krisrs1128/stat992_f23/raw/6c4130bddbdfc9ef90537c794cdca47773643752/activities/week10/political-books-nodes.csv"
edges <- read_csv(edge_data_path, col_types = "cci")
nodes <- read_csv(node_data_path, col_types = "ccc")
# Building the tbl_graph
book_graph <- tbl_graph(nodes = nodes, edges = edges, directed = FALSE)
library(ggraph)
ggraph(book_graph, layout = "kk") +
geom_edge_link(width = 0.1) +
geom_node_point(aes(color = political_ideology))+
geom_node_label(aes(label = label), size = 1.1, repel = TRUE)
ggraph(book_graph, "matrix") +
geom_edge_tile(mirror = TRUE) +
coord_fixed() +
geom_node_text(aes(label = label), size = 3, x = -2.5, nudge_y = 0.5, hjust = 0) +
geom_node_text(aes(label = label), size = 3, angle = 90, y = 0.5, nudge_x = -0.5, hjust = 0) +
scale_y_reverse(expand = c(0, 0, 0, 2.7)) + # make sure the labels aren't hidden
scale_x_discrete(expand = c(0, 3, 0, 0)) +
scale_edge_fill_distiller()
ggraph(book_graph, "matrix") +
geom_edge_tile(mirror = TRUE) +
coord_fixed()
ggraph(book_graph, "matrix") +
geom_edge_tile(mirror = TRUE) +
coord_fixed()
ggraph(book_graph, "matrix") +
geom_edge_tile(mirror = TRUE) +
coord_fixed()
library(tidygraph)
edge_data_path <- "https://raw.githubusercontent.com/krisrs1128/stat992_f23/6c4130bddbdfc9ef90537c794cdca47773643752/activities/week10/political-books-edges.csv"
node_data_path <- "https://github.com/krisrs1128/stat992_f23/raw/6c4130bddbdfc9ef90537c794cdca47773643752/activities/week10/political-books-nodes.csv"
edges <- read_csv(edge_data_path, col_types = "cci")
nodes <- read_csv(node_data_path, col_types = "ccc")
# Building the tbl_graph
book_graph <- tbl_graph(nodes = nodes, edges = edges, directed = FALSE)
book_graph
stressor <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-11/stressor.csv') %>%
mutate(stress_pct = replace_na(stress_pct, 0))
stressor
stressor <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-11/stressor.csv') %>%
mutate(stress_pct = replace_na(stress_pct, 0))
# Reshape the data to have stressor types as columns
stressor_wide <- stressor %>%
pivot_wider(
names_from = stressor,        # Create new column names from the 'stressor' values
values_from = stress_pct,     # Fill the columns with values from the 'stress_pct'
values_fill = list(stress_pct = 0) # Fill missing values with 0
)
stressor_wide
stressor <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-11/stressor.csv') %>%
mutate(stress_pct = replace_na(stress_pct, 0))
# Reshape the data to have stressor types as columns
stressor_wide <- stressor %>%
pivot_wider(
names_from = stressor,        # Create new column names from the 'stressor' values
values_from = stress_pct,     # Fill the columns with values from the 'stress_pct'
)
stressor_wide
View(stressor)
View(stressor_wide)
stressor_wide %>% select(-year, -months, -state)
kclust <- stressor_wide %>%
select(-year, -months, -state) %>%  #filter out non-numeric columns
kmeans(centers = 10) #set 10 centorids
movie_mat <- augment(kclust, stressor_wide) # creates column ".cluster" with cluster label
library("tidymodels")
kclust <- stressor_wide %>%
select(-year, -months, -state) %>%  #filter out non-numeric columns
kmeans(centers = 10) #set 10 centorids
movie_mat <- augment(kclust, stressor_wide) # creates column ".cluster" with cluster label
kclust <- tidy(kclust)
View(stressor_wide)
library("tidymodels")
kclust <- stressor_wide %>%
select(-year, -months, -state) %>%  #filter out non-numeric columns
kmeans(centers = 10) #set 10 centorids
movie_mat <- augment(kclust, stressor_wide) # creates column ".cluster" with cluster label
kclust <- tidy(kclust)
stressor_wide %>%
select(year, months, state, .cluster) %>%
arrange(.cluster)
library("tidymodels")
kclust <- stressor_wide %>%
select(-year, -months, -state) %>%  #filter out non-numeric columns
kmeans(centers = 10) #set 10 centorids
movie_mat <- augment(kclust, stressor_wide) # creates column ".cluster" with cluster label
kclust <- tidy(kclust)
stressor_wide %>%
select(year, months, state, .cluster) %>%
arrange(.cluster)
View(movie_mat)
library("tidymodels")
kclust <- stressor_wide %>%
select(-year, -months, -state) %>%  #filter out non-numeric columns
kmeans(centers = 10) #set 10 centorids
stressor_wide <- augment(kclust, stressor_wide) # creates column ".cluster" with cluster label
kclust <- tidy(kclust)
stressor_wide %>%
select(year, months, state, .cluster) %>%
arrange(.cluster)
library("tidymodels")
kclust <- stressor_wide %>%
select(-year, -months, -state) %>%  #filter out non-numeric columns
kmeans(centers = 10) #set 10 centorids
stressor_wide <- augment(kclust, stressor_wide) # creates column ".cluster" with cluster label
kclust <- tidy(kclust)
stressor_wide %>%
select(year, months, state, .cluster) %>%
arrange(.cluster)
kclust %>%
ggplot(aes(x = cluster, y = value, fill = name)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Cluster", y = "Average Stress Percentage", fill = "Stressor") +
theme_minimal()
View(kclust)
View(stressor_wide)
library("tidymodels")
library("superheat")
kclust <- stressor_wide %>%
select(-year, -months, -state) %>%  #filter out non-numeric columns
kmeans(centers = 10) #set 10 centorids
stressor_wide <- augment(kclust, stressor_wide) # creates column ".cluster" with cluster label
stressor_wide %>%
select(year, months, state, .cluster) %>%
arrange(.cluster)
kclust <- tidy(kclust)
superheat(kclust, left.label.text.size = 4, heat.pal = cols, heat.lim = c(0, 5))
library("tidymodels")
library("superheat")
kclust <- stressor_wide %>%
select(-year, -months, -state) %>%  #filter out non-numeric columns
kmeans(centers = 10) #set 10 centorids
stressor_wide <- augment(kclust, stressor_wide) # creates column ".cluster" with cluster label
stressor_wide %>%
select(year, months, state, .cluster) %>%
arrange(.cluster)
kclust <- tidy(kclust)
superheat(kclust, left.label.text.size = 4, heat.pal = cols, heat.lim = c(0, 5))
library("tidymodels")
library("superheat")
kclust <- stressor_wide %>%
select(-year, -months, -state) %>%  #filter out non-numeric columns
kmeans(centers = 10) #set 10 centorids
stressor_wide <- augment(kclust, stressor_wide) # creates column ".cluster" with cluster label
stressor_wide %>%
select(year, months, state, .cluster) %>%
arrange(.cluster)
kclust <- tidy(kclust) %>%
select(1:6)
superheat(kclust, left.label.text.size = 4, heat.pal = cols, heat.lim = c(0, 5))
View(kclust)
library("tidymodels")
library("superheat")
kclust <- stressor_wide %>%
select(-year, -months, -state) %>%  #filter out non-numeric columns
kmeans(centers = 10) #set 10 centorids
stressor_wide <- augment(kclust, stressor_wide) # creates column ".cluster" with cluster label
stressor_wide %>%
select(year, months, state, .cluster) %>%
arrange(.cluster)
kclust <- tidy(kclust)
kclust <- kclust %>%
select(1:6) %>%
pivot_longer(names_to = "stressor", values_to = "mean_value")
View(kclust)
library("tidymodels")
library("superheat")
kclust <- stressor_wide %>%
select(-year, -months, -state) %>%  #filter out non-numeric columns
kmeans(centers = 10) #set 10 centorids
stressor_wide <- augment(kclust, stressor_wide) # creates column ".cluster" with cluster label
stressor_wide %>%
select(year, months, state, .cluster) %>%
arrange(.cluster)
kclust <- tidy(kclust)
kclust_long <- kclust %>%
select(1:6) %>%
pivot_longer(cols = everything(), names_to = "stressor", values_to = "mean_value")
kclust_long
library("tidymodels")
library("superheat")
kclust <- stressor_wide %>%
select(-year, -months, -state) %>%  #filter out non-numeric columns
kmeans(centers = 10) #set 10 centorids
stressor_wide <- augment(kclust, stressor_wide) # creates column ".cluster" with cluster label
stressor_wide %>%
select(year, months, state, .cluster) %>%
arrange(.cluster)
kclust <- tidy(kclust)
kclust_long <- kclust %>%
select(1:6) %>%
pivot_longer(cols = everything(), names_to = "stressor", values_to = "mean_value")
ggplot(kclust_long, aes(x = factor(cluster), y = mean_value, fill = stressor)) +
geom_bar(stat = "identity", position = position_dodge()) +
theme_minimal() +
labs(x = "Cluster", y = "Mean Value", fill = "Stressor") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library("tidymodels")
library("superheat")
kclust <- stressor_wide %>%
select(-year, -months, -state) %>%  #filter out non-numeric columns
kmeans(centers = 10) #set 10 centorids
stressor_wide <- augment(kclust, stressor_wide) # creates column ".cluster" with cluster label
stressor_wide %>%
select(year, months, state, .cluster) %>%
arrange(.cluster)
# Assuming kclust is the result of your kmeans
centroids <- kclust$centers  # Extract centroids
# Convert centroids to a tibble/data frame
centroids_df <- as_tibble(centroids)
# Now select only the first six columns
centroids_six_columns <- centroids_df %>%
select(1:6)
# Add a cluster ID column
centroids_six_columns <- centroids_six_columns %>%
mutate(cluster = row_number())
# Convert to long format for ggplot
centroids_long <- centroids_six_columns %>%
pivot_longer(cols = -cluster, names_to = "stressor", values_to = "mean_value")
# Now plot with ggplot
ggplot(centroids_long, aes(x = factor(cluster), y = mean_value, fill = stressor)) +
geom_bar(stat = "identity", position = position_dodge()) +
theme_minimal() +
labs(x = "Cluster", y = "Mean Value", fill = "Stressor") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(stressor_wide)
library("tidymodels")
library("superheat")
kclust <- stressor_wide %>%
select(-year, -months, -state) %>%  #filter out non-numeric columns
kmeans(centers = 10) #set 10 centorids
stressor_wide <- augment(kclust, stressor_wide) # creates column ".cluster" with cluster label
stressor_wide %>%
select(year, months, state, .cluster) %>%
arrange(.cluster)
# Assuming kclust is the result of your kmeans
centroids <- kclust$centers  # Extract centroids
print(centroids)
View(kclust_long)
View(kclust_long)
View(stressor)
View(stressor_wide)
View(stressor_wide)
View(kclust)
View(stressor)
