filtered_data <- data %>% separate(year, sep = "/", into = "year", convert = TRUE, extra = "drop")
return(filtered_data)
}
field_of_study <- preprocess_dataset(read_csv("data/field_of_study.csv"))
field_of_study <- field_of_study |>
mutate(students = replace(students, is.na(students), 0)) |>
group_by(year, field_of_study)|>
mutate(total_stu = sum(students)) |>
select(c(year, field_of_study, total_stu)) |>
distinct() |>
na.omit() |>
ungroup() |>
group_by(year) |>
mutate(percent = total_stu/sum(total_stu))
field_of_study
# Create a facet grid stacked area plot
p <- ggplot(field_of_study, aes(x = year, y = percent, fill = field_of_study)) +
geom_area(alpha = 0.6) +
facet_wrap(~ field_of_study) +
theme_minimal() +
labs(title = "Student Distribution by Field of Study Over Time",
y = "Percentage", x = "Year") +
theme(legend.position = "none")
# Turn it interactive
p <- ggplotly(p, tooltip = c("x", "y", "fill"))
p
#Data Preprocess
#source of fund
source_of_fund <- preprocess_dataset(read_csv("data/source_of_fund.csv"))
#field_of_study
field_of_study <- read_csv("data/field_of_study.csv")
fos_tree <- preprocess_dataset(field_of_study)
origin <- preprocess_dataset(read_csv("data/origin.csv"))
# map_data
data("World")
world <- World |>
select(c('sovereignt',"geometry")) |>
rename('origin' = 'sovereignt')
test <- world |>
inner_join(origin |> filter(academic_type == "Undergraduate"), by = 'origin')
custom_breaks <- function(x) {
c(
min(x),
min(x)+(max(x)-min(x))/20,
min(x)+(max(x)-min(x))/15,
min(x)+(max(x)-min(x))/10,
min(x)+(max(x)-min(x))/5,
min(x)+(max(x)-min(x))/3,
min(x)+(max(x)-min(x))/2,
max(x)
)
}
#Customized Plotting Functions
#pie
pie <- function(df) {
filtered_df <- df %>%
filter(selected) %>%
group_by(source_of_fund) %>%
summarize(students = sum(students)) %>%
mutate(percentage = round(students / sum(students) * 100, 1),
label = ifelse(percentage > 5, paste0(percentage, "%"), NA))  # Only label slices >5%
ggplot(filtered_df, aes(x = 1, y = students, fill = source_of_fund)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
theme_void() +
geom_text(aes(label = label), position = position_stack(vjust = 0.5), color = "black", size = 3.5) +
scale_fill_brewer(palette = "Set3") +
labs(fill = "Source of Fund", y = "Students", x = "") +
theme(legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10))
}
#map
map <- function(df) {
filtered_df <- df %>% filter(selected)
breaks <- custom_breaks(filtered_df$students)
# Create a choropleth map using plotly directly
plot_ly(filtered_df,
geojson = filtered_df$geometry,
color = ~students,
locations = ~origin,  # make sure 'origin' is the identifier of your regions
type = 'choropleth',
colors = colorRamp(c("blue", "red")),
marker = list(line = list(width = 0))) %>%
layout(geo = list(
scope = 'world',
showlakes = TRUE,
lakecolor = toRGB('white')))
}
#tree
tree <- function(df) {
filtered_df <- df %>% filter(selected)
treemap(filtered_df,
index = c("field_of_study", "major"),
vSize = "students",
type = "index",
palette = "Set2",
align.labels = list(c("center", "center"), c("right", "bottom")))
}
#inter
inter <- function(p) {
d3tree2(p, rootname = "Field of Study")
}
#Shiny Application Logic
all_years <- c(source_of_fund$year, fos_tree$year)
min_year <- min(all_years)
max_year <- max(all_years)
ui <- fluidPage(
titlePanel("International Student Study", windowTitle = "Funding Source Dashboard"),
sidebarLayout(
sidebarPanel(
# Adding some descriptive text or instructions for users
tags$h3("Filter Options"),
tags$p("Use the slider below to select the year range for your analysis."),
# Enhanced slider input with clearer labels and improved functionality
sliderInput("yearRange", "Year of Release:",
min = min_year,
max = max_year,
value = c(min_year, max_year),
step = 1,
sep = "",
ticks = FALSE, # Removes tick marks for a cleaner look
animate = TRUE), # Adds animation to the slider for better user experience
# Additional options or filters can be added here
tags$hr(), # Adds a horizontal line for separation
# Optionally, add action buttons or other inputs as needed
# actionButton("update", "Update View", icon = icon("refresh"))
),
mainPanel(
# Use tabsetPanel for better organization of outputs
tabsetPanel(
tabPanel("Source of Fund", plotOutput("pie")),
tabPanel("Student Origin", plotOutput("map")),
tabPanel("Field of Study", uiOutput("inter"))
)
)
)
)
server <- function(input, output) {
# Single reactive expression for filtering datasets based on yearRange
subset_by_year <- reactive({
list(
fund_subset = source_of_fund %>%
mutate(selected = (year >= input$yearRange[1]) & (year <= input$yearRange[2])),
test_subset = test %>%
mutate(selected = (year >= input$yearRange[1]) & (year <= input$yearRange[2])),
tree_subset = field_of_study %>%
mutate(selected = (year >= input$yearRange[1]) & (year <= input$yearRange[2]))
)
})
# Use the reactive list elements for plotting and UI rendering
output$pie <- renderPlot({
pie(subset_by_year()$fund_subset)
})
output$map <- renderPlotly({
map(subset_by_year()$test_subset)
})
output$inter <- renderUI({
inter(tree(subset_by_year()$tree_subset))
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(readr)
library(tsibble)
library(tmap)
library(treemap)
library(ggplot2)
library(devtools)
library(d3treeR)
library(plotly)
library(shiny)
library(tmaptools)
# devtools::install_github("timelyportfolio/d3treeR")
# Function to preprocess datasets by separating 'year' and optionally filtering
preprocess_dataset <- function(data) {
filtered_data <- data %>% separate(year, sep = "/", into = "year", convert = TRUE, extra = "drop")
return(filtered_data)
}
field_of_study <- preprocess_dataset(read_csv("data/field_of_study.csv"))
field_of_study <- field_of_study |>
mutate(students = replace(students, is.na(students), 0)) |>
group_by(year, field_of_study)|>
mutate(total_stu = sum(students)) |>
select(c(year, field_of_study, total_stu)) |>
distinct() |>
na.omit() |>
ungroup() |>
group_by(year) |>
mutate(percent = total_stu/sum(total_stu))
field_of_study
# Create a facet grid stacked area plot
p <- ggplot(field_of_study, aes(x = year, y = percent, fill = field_of_study)) +
geom_area(alpha = 0.6) +
facet_wrap(~ field_of_study) +
theme_minimal() +
labs(title = "Student Distribution by Field of Study Over Time",
y = "Percentage", x = "Year") +
theme(legend.position = "none")
# Turn it interactive
p <- ggplotly(p, tooltip = c("x", "y", "fill"))
p
#Data Preprocess
#source of fund
source_of_fund <- preprocess_dataset(read_csv("data/source_of_fund.csv"))
#field_of_study
field_of_study <- read_csv("data/field_of_study.csv")
fos_tree <- preprocess_dataset(field_of_study)
origin <- preprocess_dataset(read_csv("data/origin.csv"))
# map_data
data("World")
world <- World |>
select(c('sovereignt',"geometry")) |>
rename('origin' = 'sovereignt')
test <- world |>
inner_join(origin |> filter(academic_type == "Undergraduate"), by = 'origin')
custom_breaks <- function(x) {
c(
min(x),
min(x)+(max(x)-min(x))/20,
min(x)+(max(x)-min(x))/15,
min(x)+(max(x)-min(x))/10,
min(x)+(max(x)-min(x))/5,
min(x)+(max(x)-min(x))/3,
min(x)+(max(x)-min(x))/2,
max(x)
)
}
#Customized Plotting Functions
#pie
pie <- function(df) {
filtered_df <- df %>%
filter(selected) %>%
group_by(source_of_fund) %>%
summarize(students = sum(students)) %>%
mutate(percentage = round(students / sum(students) * 100, 1),
label = ifelse(percentage > 5, paste0(percentage, "%"), NA))  # Only label slices >5%
ggplot(filtered_df, aes(x = 1, y = students, fill = source_of_fund)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
theme_void() +
geom_text(aes(label = label), position = position_stack(vjust = 0.5), color = "black", size = 3.5) +
scale_fill_brewer(palette = "Set3") +
labs(fill = "Source of Fund", y = "Students", x = "") +
theme(legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10))
}
#map
map <- function(df) {
filtered_df <- df %>% filter(selected)
breaks <- custom_breaks(filtered_df$students)
# Create a choropleth map using plotly directly
plot_ly(filtered_df,
geojson = filtered_df$geometry,
color = ~students,
locations = ~origin,  # make sure 'origin' is the identifier of your regions
type = 'choropleth',
colors = colorRamp(c("blue", "red")),
marker = list(line = list(width = 0))) %>%
layout(geo = list(
scope = 'world',
showlakes = TRUE,
lakecolor = toRGB('white')))
}
#tree
tree <- function(df) {
filtered_df <- df %>% filter(selected)
treemap(filtered_df,
index = c("field_of_study", "major"),
vSize = "students",
type = "index",
palette = "Set2",
align.labels = list(c("center", "center"), c("right", "bottom")))
}
#inter
inter <- function(p) {
d3tree2(p, rootname = "Field of Study")
}
#Shiny Application Logic
all_years <- c(source_of_fund$year, fos_tree$year)
min_year <- min(all_years)
max_year <- max(all_years)
ui <- fluidPage(
titlePanel("International Student Study", windowTitle = "Funding Source Dashboard"),
sidebarLayout(
sidebarPanel(
# Adding some descriptive text or instructions for users
tags$h3("Filter Options"),
tags$p("Use the slider below to select the year range for your analysis."),
# Enhanced slider input with clearer labels and improved functionality
sliderInput("yearRange", "Year of Release:",
min = min_year,
max = max_year,
value = c(min_year, max_year),
step = 1,
sep = "",
ticks = FALSE, # Removes tick marks for a cleaner look
animate = TRUE), # Adds animation to the slider for better user experience
# Additional options or filters can be added here
tags$hr(), # Adds a horizontal line for separation
# Optionally, add action buttons or other inputs as needed
# actionButton("update", "Update View", icon = icon("refresh"))
),
mainPanel(
# Use tabsetPanel for better organization of outputs
tabsetPanel(
tabPanel("Source of Fund", plotOutput("pie")),
tabPanel("Student Origin", plotOutput("map")),
tabPanel("Field of Study", uiOutput("inter"))
)
)
)
)
server <- function(input, output) {
# Single reactive expression for filtering datasets based on yearRange
subset_by_year <- reactive({
list(
fund_subset = source_of_fund %>%
mutate(selected = (year >= input$yearRange[1]) & (year <= input$yearRange[2])),
test_subset = test %>%
mutate(selected = (year >= input$yearRange[1]) & (year <= input$yearRange[2])),
tree_subset = field_of_study %>%
mutate(selected = (year >= input$yearRange[1]) & (year <= input$yearRange[2]))
)
})
# Use the reactive list elements for plotting and UI rendering
output$pie <- renderPlot({
pie(subset_by_year()$fund_subset)
})
output$map <- renderPlotly({
map(subset_by_year()$test_subset)
})
output$inter <- renderUI({
inter(tree(subset_by_year()$tree_subset))
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(readr)
library(tsibble)
library(tmap)
library(treemap)
library(ggplot2)
library(devtools)
library(d3treeR)
library(plotly)
library(shiny)
# devtools::install_github("timelyportfolio/d3treeR")
# Function to preprocess datasets by separating 'year' and optionally filtering
preprocess_dataset <- function(data) {
filtered_data <- data %>% separate(year, sep = "/", into = "year", convert = TRUE, extra = "drop")
return(filtered_data)
}
field_of_study <- preprocess_dataset(read_csv("data/field_of_study.csv"))
field_of_study <- field_of_study |>
mutate(students = replace(students, is.na(students), 0)) |>
group_by(year, field_of_study)|>
mutate(total_stu = sum(students)) |>
select(c(year, field_of_study, total_stu)) |>
distinct() |>
na.omit() |>
ungroup() |>
group_by(year) |>
mutate(percent = total_stu/sum(total_stu))
field_of_study
# Create a facet grid stacked area plot
p <- ggplot(field_of_study, aes(x = year, y = percent, fill = field_of_study)) +
geom_area(alpha = 0.6) +
facet_wrap(~ field_of_study) +
theme_minimal() +
labs(title = "Student Distribution by Field of Study Over Time",
y = "Percentage", x = "Year") +
theme(legend.position = "none")
# Turn it interactive
p <- ggplotly(p, tooltip = c("x", "y", "fill"))
p
#Data Preprocess
#source of fund
source_of_fund <- preprocess_dataset(read_csv("data/source_of_fund.csv"))
#field_of_study
field_of_study <- read_csv("data/field_of_study.csv")
fos_tree <- preprocess_dataset(field_of_study)
origin <- preprocess_dataset(read_csv("data/origin.csv"))
# map_data
data("World")
world <- World |>
select(c('sovereignt',"geometry")) |>
rename('origin' = 'sovereignt')
test <- world |>
inner_join(origin |> filter(academic_type == "Undergraduate"), by = 'origin')
custom_breaks <- function(x) {
c(
min(x),
min(x)+(max(x)-min(x))/20,
min(x)+(max(x)-min(x))/15,
min(x)+(max(x)-min(x))/10,
min(x)+(max(x)-min(x))/5,
min(x)+(max(x)-min(x))/3,
min(x)+(max(x)-min(x))/2,
max(x)
)
}
#Customized Plotting Functions
#pie
pie <- function(df) {
filtered_df <- df %>%
filter(selected) %>%
group_by(source_of_fund) %>%
summarize(students = sum(students)) %>%
mutate(percentage = round(students / sum(students) * 100, 1),
label = ifelse(percentage > 5, paste0(percentage, "%"), NA))  # Only label slices >5%
ggplot(filtered_df, aes(x = 1, y = students, fill = source_of_fund)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
theme_void() +
geom_text(aes(label = label), position = position_stack(vjust = 0.5), color = "black", size = 3.5) +
scale_fill_brewer(palette = "Set3") +
labs(fill = "Source of Fund", y = "Students", x = "") +
theme(legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10))
}
#map
map <- function(df) {
filtered_df <- df %>% filter(selected)
breaks <- custom_breaks(filtered_df$students)
tm_shape(filtered_df) +
tm_polygons("students", breaks = breaks,
title = "Number of Students") +
tm_layout(legend.title.size = 0.8, legend.text.size = 0.6)
}
#tree
tree <- function(df) {
filtered_df <- df %>% filter(selected)
treemap(filtered_df,
index = c("field_of_study", "major"),
vSize = "students",
type = "index",
palette = "Set2",
align.labels = list(c("center", "center"), c("right", "bottom")))
}
#inter
inter <- function(p) {
d3tree2(p, rootname = "Field of Study")
}
#Shiny Application Logic
all_years <- c(source_of_fund$year, fos_tree$year)
min_year <- min(all_years)
max_year <- max(all_years)
ui <- fluidPage(
titlePanel("International Student Study", windowTitle = "Funding Source Dashboard"),
sidebarLayout(
sidebarPanel(
# Adding some descriptive text or instructions for users
tags$h3("Filter Options"),
tags$p("Use the slider below to select the year range for your analysis."),
# Enhanced slider input with clearer labels and improved functionality
sliderInput("yearRange", "Year of Release:",
min = min_year,
max = max_year,
value = c(min_year, max_year),
step = 1,
sep = "",
ticks = FALSE, # Removes tick marks for a cleaner look
animate = TRUE), # Adds animation to the slider for better user experience
# Additional options or filters can be added here
tags$hr(), # Adds a horizontal line for separation
# Optionally, add action buttons or other inputs as needed
# actionButton("update", "Update View", icon = icon("refresh"))
),
mainPanel(
# Use tabsetPanel for better organization of outputs
tabsetPanel(
tabPanel("Source of Fund", plotOutput("pie")),
tabPanel("Student Origin", plotOutput("map")),
tabPanel("Field of Study", uiOutput("inter"))
)
)
)
)
server <- function(input, output) {
# Single reactive expression for filtering datasets based on yearRange
subset_by_year <- reactive({
list(
fund_subset = source_of_fund %>%
mutate(selected = (year >= input$yearRange[1]) & (year <= input$yearRange[2])),
test_subset = test %>%
mutate(selected = (year >= input$yearRange[1]) & (year <= input$yearRange[2])),
tree_subset = field_of_study %>%
mutate(selected = (year >= input$yearRange[1]) & (year <= input$yearRange[2]))
)
})
# Use the reactive list elements for plotting and UI rendering
output$pie <- renderPlot({
pie(subset_by_year()$fund_subset)
})
output$map <- renderPlot({
map(subset_by_year()$test_subset)
})
output$inter <- renderUI({
inter(tree(subset_by_year()$tree_subset))
})
}
shinyApp(ui, server)
